Web VPython 3.2
scene.camera.pos = vector(0, 10, 70)
### DEFAULT SET UP
planks = []
plankLength = 4
plankRadius = 2
numPlanks = 10
spacing = 5

springs = []
numSprings = numPlanks-1

for i in range(numPlanks):
    planks[i] = cylinder(pos = vec(-(numPlanks-1)*(spacing)/2 + spacing*i, 0, 0), axis = vec(0, 0, 1), color = vec(0.5, 0.25, 0), length = plankLength, radius = plankRadius)
    planks[i].vel = vector(0, 0, 0)
    planks[i].acc = vector(0, 0, 0)
for i in range(1, numPlanks-1):
    planks[i].springForceR = vector(0, 0, 0)
    planks[i].springForceL = vector(0, 0, 0)

for i in range(numSprings):
    springs[i] = helix(pos = vec(planks[i].pos.x+plankRadius, 0, plankLength/2), axis = vec(planks[i+1].pos.x-planks[i].pos.x-2*plankRadius, 0, 0), color = color.yellow, thickness = 1/10)

cliff1 = box(pos = vec(-(numPlanks-1)*spacing/2-4.5, -5, plankLength/2), axis = vec(0, 0, 0), length = 5, height = 15, width = 5, texture = textures.granite)
cliff2 = box(pos = vec((numPlanks-1)*spacing/2+4.5, -5, plankLength/2), axis = vec(0, 0, 0), length = 5, height = 15, width = 5, texture = textures.granite)

### FORCES
gravity = vector(0, 9.81, 0)
plankMass = 50
kCoef = 1000
dCoef = 2*sqrt(plankMass*kCoef)

### USER INPUT
#pedestrian
person = ellipsoid(pos=vec(planks[0].pos.x, planks[0].pos.y+plankRadius+4, 0), length=4, height=8, width=4, color=color.cyan)
#hyperbolic cosine curve
changeModelCat = slider(bind=changeModelCat, min=0, max = 15, step = 1, value=0, align = 'left')
ModelCat = wtext(text='a = ' + '{:1.2f}'.format(changeModelCat.value) + '\n\n\n')
def changeModelCat(evt):
    ModelCat.text = '{:1.2f}'.format(evt.value) + '\n\n\n'

changeNPlanksSlider = slider(bind=changeNPlanks, min=5, max=15, step = 1, value=numPlanks, align = 'left')
NPlanks = wtext(text='{:1.2f}'.format(changeNPlanksSlider.value) + ' planks' + '\n\n')
def changeNPlanks(evt):
    NPlanks.text = '{:1.2f}'.format(evt.value) + ' planks' + '\n\n'

changeKCoefSlider = slider(bind=changeKCoef, min=1500, max=2500, step = 1, value=kCoef, align = 'left')
KCoefs = wtext(text='{:1.2f}'.format(changeKCoefSlider.value) + ' - Spring Constant' + '\n\n')
def changeKCoef(evt):
    KCoefs.text = '{:1.2f}'.format(evt.value) + ' - Spring Constant' + '\n\n'

changeDConstSlider = slider(bind=changeDConst, min=0.5, max=1.5, step = 0.1, value=1, align = 'left')
DCoefs = wtext(text='{:1.2f}'.format(changeDConstSlider.value) + ' * Natural Damping Constant' + '\n\n')
def changeDConst(evt):
    DCoefs.text = '{:1.2f}'.format(evt.value) + ' * Natural Damping Constant' + '\n\n'
    
changeMassSlider = slider(bind=changeMass, min = 25, max = 75, step = 1, value = plankMass, align = 'left')
Masses = wtext(text='{:1.2f}'.format(changeMassSlider.value) + ' - Mass (kg)' + '\n\n')
def changeMass(evt):
    Masses.text = '{:1.2f}'.format(evt.value) + ' - Mass (kg)' + '\n\n'
    
changeCliff1 = slider(bind=changeCliff1, min = 15, max = 40, step = 5, value = cliff1.height, align = 'left')
hCliff1 = wtext(text='{:1.2f}'.format(changeCliff1.value) + ' - Height, cliff 1 (m)' + '\n\n')
def changeCliff1(evt):
    hCliff1.text = '{:1.2f}'.format(evt.value) + ' - Height, cliff 1 (m)' + '\n\n'
    
changeCliff2 = slider(bind=changeCliff2, min = 15, max = 40, step = 5, value = cliff2.height, align = 'left')
hCliff2 = wtext(text='{:1.2f}'.format(changeCliff2.value) + ' - Height, cliff 2 (m)' + '\n\n')
def changeCliff2(evt):
    hCliff2.text = '{:1.2f}'.format(evt.value) + ' - Height, cliff 2 (m)' + '\n\n'
    
applyingForces = False
button(bind = applyForces, text = "Apply forces!", pos = scene.title_anchor)
def applyForces(b):
    global applyingForces
    applyingForces = not applyingForces
    if applyingForces: 
        b.text = "Stop, adjust sliders"
    else: 
        b.text = "Apply forces!"

### RUNTIME
dt = 0.1
while (True):
    rate(60)
    if applyingForces:
        # disable sliders
        changeNPlanksSlider.disabled = True
        changeKCoefSlider.disabled = True
        changeDConstSlider.disabled = True
        changeMassSlider.disabled = True
        changeCliff1.disabled = True
        changeCliff2.disabled = True
        
        for i in range(1, numPlanks-1): # forces applied
            deltaLR = planks[i].pos-planks[i+1].pos   # vector, this to right
            planks[i].springForceR = kCoef * mag(deltaLR) * norm(deltaLR)
            deltaLL = planks[i].pos-planks[i-1].pos   # left adjacent plank
            planks[i].springForceL = kCoef * mag(deltaLL) * norm(deltaLL)
            
            planks[i].acc = ((-gravity*plankMass) - (planks[i].springForceR+planks[i].springForceL) - planks[i].vel*dCoef)/plankMass
            planks[i].vel = planks[i].vel + planks[i].acc*dt
            planks[i].pos = planks[i].pos + planks[i].vel*dt
        for i in range(numSprings):     # move springs
            springs[i].pos = vector(planks[i].pos.x+plankRadius, planks[i].pos.y, plankLength/2)
            springs[i].axis = vector(planks[i+1].pos.x-planks[i].pos.x-2*plankRadius, planks[i+1].pos.y-planks[i].pos.y, 0)  
    else: 
        changeNPlanksSlider.disabled = False
        changeKCoefSlider.disabled = False
        changeDConstSlider.disabled = False
        changeMassSlider.disabled = False
        changeCliff1.disabled = False
        changeCliff2.disabled = False
