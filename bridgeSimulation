Web VPython 3.2
scene.camera.pos = vector(0, 20, 70)
### DEFAULT SET UP
planks = []
plankLength = 4
plankRadius = 2
numPlanks = 5
spacing = 5

springs = []
numSprings = numPlanks-1

for i in range(numPlanks):
    planks[i] = cylinder(pos = vec(-(numPlanks-1)*(spacing)/2 + spacing*i, 0.5, 0), axis = vec(0, 0, 1), color = vec(0.5, 0.25, 0), length = plankLength, radius = plankRadius)
    planks[i].vel = vector(0, 0, 0)
    planks[i].acc = vector(0, 0, 0)
for i in range(1, numPlanks-1):
    planks[i].springForceR = vector(0, 0, 0)
    planks[i].springForceL = vector(0, 0, 0)
    
for i in range(numSprings):
    springs[i] = helix(pos = vec(planks[i].pos.x+plankRadius, 0.5, plankLength/2), axis = vec(planks[i+1].pos.x-planks[i].pos.x-2*plankRadius, 0, 0), color = color.yellow, thickness = 1/10)

cliff1 = box(pos = vec(-(numPlanks-1)*spacing/2-4.5, -5, plankLength/2), axis = vec(0, 0, 0), length = 5, height = 15, width = 5, texture = textures.granite)
cliff2 = box(pos = vec((numPlanks-1)*spacing/2+4.5, -5, plankLength/2), axis = vec(0, 0, 0), length = 5, height = 15, width = 5, texture = textures.granite)

person = ellipsoid(pos=vec(planks[0].pos.x, planks[0].pos.y+plankRadius+4, 0), length=4, height=8, width=4, color=color.cyan)
    
### FORCES
gravity = vector(0, 9.81, 0)
plankMass = 50
kCoef = 1500
dConst = 2*sqrt(plankMass*kCoef)

### USER INPUT
#hyperbolic cosine curve
ptsList = []
a = 1
for xVal in range(-30, 30, 0.1):
    yVal = (a/2) * (exp(xVal/a)+exp(-xVal/a))
    ptsList.append(vec(xVal, yVal + 20, -100))
catCurve = curve(pos = ptsList, color = color.red, radius = 1.5)
changeModelCat = slider(bind=changeCat, min=1, max = 15, step = 0.1, value=1, align = 'left')  
ModelCat = wtext(text='a = ' + '{:1.2f}'.format(changeModelCat.value) + '\n\n\n')
def changeCat(evt):
    global catCurve
    catCurve.visible = False
    ptsList = []
    ModelCat.text = 'a = ' + '{:1.2f}'.format(evt.value) + '\n\n\n'
    a = evt.value
    for xVal in range(-30, 30, 0.1):
        yVal = (a/2) * (exp(xVal/a)+exp(-xVal/a))
        ptsList.append(vec(xVal, yVal + 20, -100))
    newCurve = curve(pos = ptsList, color = color.red, radius = 1.5)
    catCurve = newCurve    
#other sliders
changeNPlanksSlider = slider(bind=changeNPlanks, min=5, max=15, step = 1, value=numPlanks, align = 'left')
NPlanks = wtext(text= 'n planks: ' + '{:1.2f}'.format(changeNPlanksSlider.value) + '\n\n')
def changeNPlanks(evt):
    NPlanks.text = 'n planks: ' + '{:1.2f}'.format(evt.value) + '\n\n'
    reset()
changeKCoefSlider = slider(bind=changeKCoef, min=1500, max=2500, step = 1, value=kCoef, align = 'left')
KCoefs = wtext(text='Spring Constant: ' + '{:1.2f}'.format(changeKCoefSlider.value) + ' N/m' + '\n\n')
def changeKCoef(evt):
    KCoefs.text = 'Spring Constant: ' + '{:1.2f}'.format(evt.value) + ' N/m' + '\n\n'
    reset()
changeDConstSlider = slider(bind=changeDConst, min=0.5, max=1.5, step = 0.1, value=1, align = 'left')
DCoefs = wtext(text='Natural Damping Constant: ' + '{:1.2f}'.format(changeDConstSlider.value) + '\n\n')
def changeDConst(evt):
    DCoefs.text = 'Natural Damping Constant: ' + '{:1.2f}'.format(evt.value) + '\n\n'
    reset()
changeMassSlider = slider(bind=changeMass, min = 50, max = 200, step = 1, value = plankMass, align = 'left')
Masses = wtext(text='Mass: ' + '{:1.2f}'.format(changeMassSlider.value) + ' kg' + '\n\n')
def changeMass(evt):
    Masses.text ='Mass: ' + '{:1.2f}'.format(evt.value) + ' kg' + '\n\n'
    reset()
changeCliff1 = slider(bind=changeCliff1, min = 15, max = 40, step = 5, value = cliff1.height, align = 'left')
hCliff1 = wtext(text='Height of Cliff 1: ' + '{:1.2f}'.format(changeCliff1.value) + ' m' + '\n\n')
def changeCliff1(evt):
    hCliff1.text='Height of Cliff 1: ' + '{:1.2f}'.format(evt.value) + ' m' + '\n\n'
    reset()
changeCliff2 = slider(bind=changeCliff2, min = 15, max = 40, step = 5, value = cliff2.height, align = 'left')
hCliff2 = wtext(text='Height of Cliff 2: ' + '{:1.2f}'.format(changeCliff2.value) + ' m' + '\n\n')
def changeCliff2(evt):
    hCliff2.text = 'Height of Cliff 2: ' + '{:1.2f}'.format(evt.value) + ' m' + '\n\n'
    reset()
   
# reset for slider input
def reset(): 
    global planks
    global springs
    global plankRadius
    global spacing
    global numPlanks
    global numSprings
    global kCoef
    global dConst
    global plankMass
    global cliff1
    global cliff2
    global person
    
    for i in planks:
        i.visible = False
    for i in springs:
        i.visible = False
    planks = []
    springs = []
    numPlanks = changeNPlanksSlider.value
    numSprings = numPlanks-1    
    cliff1.pos = vec(-(numPlanks-1)*spacing/2-4.5, -5+changeCliff1.value/2-15/2, plankLength/2)
    cliff1.height = changeCliff1.value
    cliff2.pos = vec((numPlanks-1)*spacing/2+4.5, -5+changeCliff2.value/2-15/2, plankLength/2)
    cliff2.height = changeCliff2.value
    pIncrement = vec(0, (cliff2.height-cliff1.height)/numPlanks, 0)
    for i in range(numPlanks):
        planks[i] = cylinder(pos = vec(-(numPlanks-1)*(spacing)/2 + spacing*i, cliff1.pos.y+cliff1.height/2-plankRadius, 0)+pIncrement*i, axis = vec(0, 0, 1), color = vec(0.5, 0.25, 0), length = plankLength, radius = plankRadius)
        planks[i].vel = vector(0, 0, 0)
        planks[i].acc = vector(0, 0, 0)
    for i in range(1, numPlanks-1):
        planks[i].springForceR = vector(0, 0, 0)
        planks[i].springForceL = vector(0, 0, 0)
    for i in range(numSprings):
        springs[i] = helix(pos = vec(planks[i].pos.x+plankRadius, planks[i].pos.y, plankLength/2), axis = vec(planks[i+1].pos.x-planks[i].pos.x-2*plankRadius, planks[i+1].pos.y-planks[i].pos.y, 0), color = color.yellow, thickness = 1/10)

    person.pos=vec(planks[0].pos.x, planks[0].pos.y+plankRadius+4, 0)

    ### UPDATE VARIABLES
    kCoef = changeKCoefSlider.value
    plankMass = changeMassSlider.value
    dConst = 2*sqrt(plankMass*kCoef) * changeDConstSlider.value
    

applyingForces = False
button(bind = applyForces, text = "Apply forces!", pos = scene.title_anchor)
def applyForces(b):
    global applyingForces
    applyingForces = not applyingForces
    if applyingForces: 
        b.text = "Stop, adjust sliders"
    else: 
        b.text = "Apply forces!"

### RUNTIME
dt = 0.1
while (True):
    rate(60)
    if applyingForces:
        # disable sliders
        changeNPlanksSlider.disabled = True
        changeKCoefSlider.disabled = True
        changeDConstSlider.disabled = True
        changeMassSlider.disabled = True
        changeCliff1.disabled = True
        changeCliff2.disabled = True
        
        for i in range(1, numPlanks-1): # forces applied
            deltaLR = planks[i+1].pos-planks[i].pos   # vector, this to right
            planks[i].springForceR = kCoef * deltaLR
            deltaLL = -(planks[i].pos-planks[i-1].pos)   # left adjacent plank
            planks[i].springForceL = kCoef * deltaLL
            planks[i].acc = ((-gravity*plankMass) + (planks[i].springForceR+planks[i].springForceL) - planks[i].vel*dConst)/plankMass
            planks[i].vel = planks[i].vel + planks[i].acc*dt
            planks[i].pos = planks[i].pos + planks[i].vel*dt
        for i in range(numSprings):     # move springs
            springs[i].pos = vector(planks[i].pos.x+plankRadius, planks[i].pos.y, plankLength/2)
            springs[i].axis = vector(planks[i+1].pos.x-planks[i].pos.x-2*plankRadius, planks[i+1].pos.y-planks[i].pos.y, 0)  
    else: 
        changeNPlanksSlider.disabled = False
        changeKCoefSlider.disabled = False
        changeDConstSlider.disabled = False
        changeMassSlider.disabled = False
        changeCliff1.disabled = False
        changeCliff2.disabled = False
