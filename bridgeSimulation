Web VPython 3.2
### SET UP
planks = []
plankLength = 4
plankRadius = 2
numPlanks = 10
spacing = 5

springs = []
numSprings = numPlanks-1

for i in range(numPlanks):
    planks[i] = cylinder(pos = vec(-(numPlanks-1)*(spacing)/2 + spacing*i, 0, 0), axis = vec(0, 0, 1), color = vec(0.5, 0.25, 0), length = plankLength, radius = plankRadius)
    planks[i].vel = vector(0, 0, 0)
    planks[i].acc = vector(0, 0, 0)
for i in range(numSprings):
    springs[i] = helix(pos = vec(planks[i].pos.x+plankRadius, 0, plankLength/2), axis = vec(planks[i+1].pos.x-planks[i].pos.x-2*plankRadius, 0, 0), color = color.yellow, thickness = 1/10)

cliff1 = box(pos = vec(-(numPlanks-1)*spacing/2-4.5, -5, plankLength/2), axis = vec(0, 0, 0), length = 5, height = 15, width = 5, texture = textures.granite)
cliff2 = box(pos = vec((numPlanks-1)*spacing/2+4.5, -5, plankLength/2), axis = vec(0, 0, 0), length = 5, height = 15, width = 5, texture = textures.granite)

### FORCES
gravity = vector(0, 9.81, 0)
plankMass = 50
kCoef = 2000
naturalb = 2*sqrt(plankMass*kCoef)


### RUNTIME
dt = 0.1
while (True):
    rate(60)
    for i in range(1, numPlanks-1):
        planks[i].acc = (-gravity*plankMass) + vector(0, (-kCoef*planks[i].pos.y-planks[i].vel.y*naturalb)/plankMass, 0)
        planks[i].vel = planks[i].vel + planks[i].acc*dt
        planks[i].pos = planks[i].pos + planks[i].vel*dt
    for i in range(numSprings):
        springs[i].pos = vector(planks[i].pos.x+plankRadius, planks[i].pos.y, plankLength/2)
        springs[i].axis = vector(planks[i+1].pos.x-planks[i].pos.x-2*plankRadius, planks[i+1].pos.y-planks[i].pos.y, 0)
